
// 2017 February, by admin@xarta.co.uk
// first time I've done any real JavaScript, JQuery, CSS stuff in many years
// ... and I never previously learned JavaScript or CSS beyond pretty basic stuff
// ... really finding my feet.  Hopefully I'll mature and advance this code over time.

// MOVED THIS FROM MY MAIN SITE FOOTER AS SYNTAX HIGHLIGHTING GREW INTO A PROJECT

// see main site header for extraDebug and clog and ajax
/**
    Commented-out  snapshot copy here for reference

    // ***********************************************  
    // 0=off, 1, 2, 3: console log and other stuff   *
    var extraDebug = 1; //                           *
    // clog = console.log if number >= extraDebug    *
    clog("extraDebug set to: "+extraDebug, 1); //    *
    // ***********************************************

    // TODO: look at enum sort of stuff in JavaScript for level
    function clog(message,level)
    {
	    if (extraDebug>=level)
	    {
		    console.log(message);
	    }
    }
    TODO: look at using with promises
         help get rid of associated globals
         and better error handling
        e.g. https://www.stephanboyer.com/post/107/fun-with-promises-in-javascript

    function ajax(url, responseFunction, postString)
    {
        // TODO: ERROR HANDLING (assumption that successful)

        clog("ajax",1);

        var xhttp;
        // leaving-in feature support check for my education
        // currently pointless given all the other assumptions and constraints
        if (window.XMLHttpRequest)
        {
            xhttp = new XMLHttpRequest();
        } else {
            // code for IE6, IE5 (old example! leaving in for fun)
            // (this code only works in latest Chrome on decent machine anyway!)
            xhttp = new ActiveXObject("Microsoft.XMLHTTP"); 
        }

        xhttp.onreadystatechange = function() 
        {
            if (this.readyState == 4 && this.status == 200) 
            {
                responseFunction(this);
            }
            else
            {
                // What? Yeah? What you gonna do about it?
            }
        };
        clog("url="+url+"?random="+Math.random(),1);
        clog("postString="+postString,1);
        xhttp.open("POST", url, true);
        xhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
        xhttp.send(postString);
    }
*/



// IMPORTANT: although using document-ready here ... remember that class names / divs
//            are later set-up by the syntaxhighlighter.js script ... so can't pre-pend buttons
//            for example to divs/classes that don't exist yet!

jQuery(document).ready(function($) {
    
    // override: wp-colorbox/wp-colorbox.js
        // public function in colorbox plug-in (extends jQuery).
        // it has the added benefit of binding click events to the wp-colorbox-inline
        // elements, using the unqiue value generated by the php wp shortcode, 
        // and storing it as settings in jQuery data.  Adds the class cboxElement.
    $(".wp-colorbox-inline").colorbox({inline:true, width:"99%", minWidth:"99%",maxWidth:"99%"}).delay(50);


    $(".xarta-syntax-highlight").width("100%");             // targeting divs with presentation code
    //var curWidthPx = parseInt($(window).width()+"px");    // browser window width
    //var big = curWidthPx > 1000;                          // might use in future (but using @media queries)
    

    // call this from window resize event available to JQuery, and pass as a callback
    // to the function that pre-pends the buttons and sets-up the on-click events
    function codeButtonLabelChange(xartaWidthControl, xartaInstanceID){
        // using xartaBigCodeTarget in case I want to selectively target 
        // ONLY specific code presentation

        clog("codeButtonLabelChange,"+  " xartaWidthControl = "+xartaWidthControl+
                                        " xartaInstanceID = "+xartaInstanceID, 1);

        var curxartaWidthControlPx = parseInt($(xartaWidthControl+xartaInstanceID).width());
        var small = curxartaWidthControlPx < 500;
        var labelFont = small ? "f" : "font";
        var labelWidth = small ? "w" : "width";

        clog('curxartaWidthControlPx = '+curxartaWidthControlPx, 1);
        clog(xartaInstanceID+' button labels: '+labelFont+' , '+labelWidth, 1);

        $(xartaInstanceID+'.increase-font').html(labelFont); // classes target css buttons
        $(xartaInstanceID+'.decrease-font').html(labelFont);
        $(xartaInstanceID+'.inflate-code').html(labelWidth);
        $(xartaInstanceID+'.shrink-code').html(labelWidth); 
    };  

    // so buttons only exist after prepended by JQuery
    function renderCodeButtons(
                                codeButtonLabelChange, 
                                xartaBigCodeTarget, 
                                xartaWidthControl, 
                                xartaCodeButtons,
                                xartaInstanceID){
        
        clog("renderCodeButtons,"+  " xartaBigCodeTarget = "+xartaBigCodeTarget+
                                    " xartaWidthControl = "+xartaWidthControl+
                                    " xartaCodeButtons = "+xartaCodeButtons+
                                    " xartaInstanceID = "+xartaInstanceID, 1);

        var myprependFont = 'Â <a class="fasc-button fasc-size-large fasc-type-glossy fasc-ico-before dashicons-plus' +
            ' '+xartaInstanceID+' increase-font" style="background-color: #000; color: #ffffff;" data-fasc-style="background-color' + 
            ':#000;color:#ffffff;"></a> <a class="fasc-button fasc-size-large fasc-type-glossy fasc-ico-before' +
            ' dashicons-minus '+xartaInstanceID+' decrease-font" style="background-color: #000; color: #ffffff;" ' +
            ' data-fasc-style="background-color:#000;color:#ffffff;"></a>';
   
        var myprependWidth = '<a class="fasc-button fasc-size-large fasc-type-glossy fasc-ico-before dashicons-plus' +
            ' '+xartaInstanceID+' inflate-code" style="background-color: #000; color: #ffffff;" data-fasc-style="background-color' +
            ':#000;color:#ffffff;"></a> <a class="fasc-button fasc-size-large fasc-type-glossy fasc-ico-before' +
            ' dashicons-minus '+xartaInstanceID+' shrink-code" style="background-color: #000; color: #ffffff;" ' +
            ' data-fasc-style="background-color:#000;color:#ffffff;"></a>';

        $(xartaCodeButtons+xartaInstanceID).prepend(myprependFont);
        $(xartaCodeButtons+xartaInstanceID).prepend(myprependWidth);
        codeButtonLabelChange(xartaWidthControl, xartaInstanceID);


        // Set-up the on-click events for the buttons
        // initial css style sheet uses @media queries ...
        // ems as a fallback, and vws if supported
        // but once manually changing here, px should be fine

        $("a.decrease-font").on( "click", function() {
            var curSize = parseInt($(xartaBigCodeTarget+xartaInstanceID).css('font-size'));
            clog("curSize: "+curSize,1);
            curSize = curSize - 1;
            $( xartaBigCodeTarget+xartaInstanceID ).each(function () {
                this.style.setProperty( 'font-size', curSize +'px', 'important' );
                clog("Decrease font - found "+xartaBigCodeTarget+xartaInstanceID, 1);
            });
        });

        $("a.increase-font").on( "click", function() {
            var curSize = parseInt($(xartaBigCodeTarget+xartaInstanceID).css('font-size'));
            curSize = curSize + 1;
            $( xartaBigCodeTarget+xartaInstanceID ).each(function () {
                this.style.setProperty( 'font-size', curSize +'px', 'important' );
            });
        });

        // on-click events for changing the width of the code-presentation area
        // this will also change the labels of the buttons if required
        // (the function was passed to this function)

        $("a.shrink-code").on( "click", function() {
            // .entry-content class particular to this theme (maybe)

            var probableContainerForPercentCalcs;

            if($(".tabcontents").length)
            {
                clog("Ok: seem to be in a menutab", 1);
                probableContainerForPercentCalcs = ".tabcontents";
                // so that new % doesn't end-up less than current%    
            }
            else
            {
                probableContainerForPercentCalcs = ".entry-content";    
            }

            var curContainerWidthPx = parseInt($(probableContainerForPercentCalcs).width());
            //var curWinWidthPx = parseInt($(window).width()+"px");

            // in this case, xartaWidthControl same DIV as xarta-code-buttons class
            // so WILL have xartaInstanceID
            var curWidth = parseInt($(xartaWidthControl+xartaInstanceID).width());
            var fivePercent = curContainerWidthPx/20;
            var newWidthPx = curWidth-fivePercent;
         
            // IMPORTANT: keep as percentage e.g. orientation on mobile device
            var newWidthPercent = newWidthPx/curContainerWidthPx*100;

            $(xartaWidthControl+xartaInstanceID).width(newWidthPercent+"%");
            codeButtonLabelChange(xartaWidthControl, xartaInstanceID);
        });


        $("a.inflate-code").on( "click", function() {
            var probableContainerForPercentCalcs;

            if($(".tabcontents").length)
            {
                clog("Ok: seem to be in a menutab",1);
                probableContainerForPercentCalcs = ".tabcontents";
                // so that new % doesn't end-up less than current%    
            }
            else
            {
                probableContainerForPercentCalcs = ".entry-content";    
            }

            var curContainerWidthPx = parseInt($(probableContainerForPercentCalcs).width());
            clog("curContainerWidthPx: "+curContainerWidthPx,1);
            //var curWinWidthPx = parseInt($(window).width()+"px");
            //console.log("curWinWidthPx: "+curWinWidthPx);
            var curWidth = parseInt($(xartaWidthControl+xartaInstanceID).width());
            clog("curWidth: "+curWidth,1);
            var fivePercent = curContainerWidthPx/20;
            clog("fivePercent: "+fivePercent,1);
            var newWidthPx = curWidth+fivePercent;
            clog("newWidthPx: "+newWidthPx,1);
            var oldWidthPercent = curWidth/curContainerWidthPx*100;
            clog("oldWidthPercent: "+oldWidthPercent,1);
            var newWidthPercent = newWidthPx/curContainerWidthPx*100;
            clog("newWidthPercent: "+newWidthPercent, 1);

            $(xartaWidthControl+xartaInstanceID).width(newWidthPercent+"%");
            codeButtonLabelChange(xartaWidthControl, xartaInstanceID);
        });
    
    }; // end renderCodeButtons()

    // generic classes (defaults)
    var xartaBigCodeTarget = ".xarta-big-code";         // custom syntaxhighlighter class, optional
    var xartaWidthControl = ".xarta-syntax-highlight";  // containing DIV
    var xartaCodeButtons = ".xarta-code-buttons";       // if present, will render buttons
                                                        // ... this class with xarta-syntax-highlight
   
    // this is default (have to set dynamically per instance)
    var xartaInstanceID = '';                           // class set in xarta-syntaxhighlighter.php
                                                        // per instance, of form:
                                                        // xarta-id-58c00bfabbfcd (random number)

                        // e.g. outer-DIV: (if buttons required)
                        // xarta-syntax-highlight xarta-code-buttons xarta-id-58c00bfabbfcd

                        // e.g. outer-DIV: (if no buttons required)
                        // xarta-syntax-highlight

                        // e.g. inner-DIV: (default classname)
                        // syntaxhighlighter xarta-big-code xarta-id-58c00bfabbfcd

                        // jQuery intersect selections (no space inbetween)
                        // e.g. $(xartaBigCodeTarget+xartaInstanceID)
                        // &    $(xartaCodeButtons+xartaInstanceID)
                        // ... generic if no xartaInstanceID

    
    // trigger this event in syntaxhighlighter.js when highlighting done
    $( "body" ).on( "moreCodeEventEnded", function( event, eventData ) 
    {
        // dom elements should be ready (changed by syntaxhighlighter.js)
        $(".syntaxhighlighter").each(function()
        {
            var stringWithClassNames = $(this).attr('class');

            clog(".syntaxhighlighter each ... attr class: "+ stringWithClassNames,1); 

            xartaInstanceID = stringWithClassNames.match(/(xarta-id-)([0-9a-f]){13}/g);

            clog("instance id: "+xartaInstanceID, 1);


        });
    });


    

            renderCodeButtons(  codeButtonLabelChange, 
                    xartaBigCodeTarget, 
                    xartaWidthControl, 
                    xartaCodeButtons,
                    xartaInstanceID);



    $(window).resize(function() {
        codeButtonLabelChange(xartaWidthControl, xartaInstanceID);
    }).resize();

    
    // buttons get pre-pended to div with class in var xartaCodeButtons
    // to select further, use jquery 
    
    function xgithub_ajax_post_load_in(targetDiv, postUrl )
    {
        // only allow site origin for extra safety / simplicity
        clog ("xgithub_ajax_post_load_in("+targetDiv+", "+postUrl+")",1);

        var postString = "nothing"; // might review in future

        // assign "this" as "passthis" in my global ajax() function
        function responseFunction(passthis)
        {
            $(targetDiv).html(passthis.responseText);
            
            // added event in built syntaxhighlighter.js to start highlighting
            $( "body" ).trigger( "moreCodeEventStarted", [ "NO DATA YET"] );


            
            $(".xarta-syntax-highlight").width("100%");
            renderCodeButtons(  codeButtonLabelChange, 
                                xartaBigCodeTarget, 
                                xartaWidthControl, 
                                xartaCodeButtons,
                                xartaInstanceID);

            // public function in colorbox plug-in (extends jQuery).
            // it has the added benefit of binding click events to the wp-colorbox-inline
            // elements, using the unqiue value generated by the php wp shortcode, 
            // and storing it as settings in jQuery data.  Adds the class cboxElement.
            $(".wp-colorbox-inline").colorbox(
                {inline:true, width:"99%", minWidth:"99%",maxWidth:"99%"}).delay(10);
        }
        
        // my global ajax function
        ajax(postUrl, responseFunction, postString);
    }





    $("#colorbox_test_btn").click(function() {
        //alert("hello");
        //$(document).trigger('cbox_open');
        //$( "body" ).trigger( "moreCodeEvent2", [ $( ".cboxElement") ] ); 
        //$(".wp-colorbox-inline").colorbox({inline:true, width:"99%", minWidth:"99%",maxWidth:"99%"}).delay(50);
        //alert( $("#ajax-target .xarta-big-code").attr('class'));

           $(".xarta-big-code").each(function()
    {
        clog("Hello",1);
        clog(".syntaxhighlighter each ... attr class: "+ $(this).attr('class'),1);
    });


    });


    $("#ajax_test_btn").click(function() {
        clog("ajax_test_xgithub()",1);
        var url = "https://blog.xarta.co.uk/2017/03/httpsraw-githubusercontent-comdavros1973my-wp-code-snippetsmasterxgithub-php/";
        var postString = "nothing";

        // assign "this" as passthis in my ajax() function
        function responseFunction(passthis)
        {
            $("#ajax-target").html(passthis.responseText);

            $( "body" ).trigger( "moreCodeEventStarted", [ "BLAH" ] );  
            



            $(".xarta-syntax-highlight").width("100%");
            renderCodeButtons(codeButtonLabelChange, xartaBigCodeTarget, xartaWidthControl, xartaCodeButtons, xartaInstanceID);

            // public function in colorbox plug-in (extends jQuery).
            // it has the added benefit of binding click events to the wp-colorbox-inline
            // elements, using the unqiue value generated by the php wp shortcode, 
            // and storing it as settings in jQuery data.  Adds the class cboxElement.
            $(".wp-colorbox-inline").colorbox({inline:true, width:"99%", minWidth:"99%",maxWidth:"99%"}).delay(50);







        }
        ajax(url, responseFunction, postString);
    });


});